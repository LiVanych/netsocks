#!/usr/bin/env python3

"""
Usage:
 netsocks [HOST PORT]
 netsocks [-g group,group]
 netsocks [-a][-l][-h]
 netsocks [-X group,group]
 netsocks [-x host,host]
 netsocks [-L group]
 netsocks [-H host,host]
 netsocks [-c file [-a][-l]]
 netsocks [-c file [-x host]]
 netsocks [-c file [-X group]]
 netsocks [-c file [-g group]]
 netsocks [-c file [-L group]]
 netsocks [-c file [-H host]]

Arguments:
 HOST       hostname or IP
 PORT       TCP port

Options:
 -l         groups list printing
 -L <grp>   one group hosts list
 -a         all sockets scan
 -X <grp>   all group except few
 -x <host>  all except something
 -g <grp>   one group checking
 -H <host>  one host socks check
 -c <file>  custom config file
 -h,--help  this help message
"""

import os
import sys
import socket
import threading
from datetime import datetime
import oyaml as yaml
from docopt import docopt


class ConfigData:
    """ Configuration input data """

    def __init__(self, config):
        self.config = config

    def configure(self):
        """ Current configuration return """
        return self.config


class ResultData:
    """ Agregation and report RESULT data """

    def __init__(self, report_data=''):
        self.report_data = report_data

    def add(self, newline):
        """ Agrefation report lines """
        self.report_data += newline

    def report(self):
        """ Return conclusion report """
        return self.report_data


def time_now():
    """ Current time defining """

    now = datetime.now()
    dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
    return dt_string


def print_progress_bar(iteration, total,
                       prefix='', suffix='', decimals=1,
                       length=100, fill='â–ˆ', print_end="\r"):
    """
    Call in a loop to create terminal progress progress_bar
    @params:
        iteration   - Required  : current iteration (Int)
        total       - Required  : total iterations (Int)
        prefix      - Optional  : prefix string (Str)
        suffix      - Optional  : suffix string (Str)
        decimals    - Optional  : positive number of decimals in percent
                                  complete (Int)
        length      - Optional  : character length of progress_bar (Int)
        fill        - Optional  : progress_bar fill character (Str)
        print_end   - Optional  : end character (e.g. "\r", "\r\n") (Str)
    """
    try:
        percent = ("{0:." + str(decimals) + "f}").format(
            100 * (iteration / float(total)))
    except ZeroDivisionError:
        print("Ooops! Something are going wrong!")
        sys.exit()
    filled_length = int(length * iteration // total)
    progress_bar = fill * filled_length + '-' * (length - filled_length)

    print('\r%s |%s| %s%% %s' % (prefix, progress_bar, percent, suffix),
          end=print_end)

    # Print New Line on Complete
    if iteration == total:
        print()


def get_config_file():
    """ Default config file is expected same named and in same directories """

    script_path = os.path.realpath(__file__)
    default_config_file = script_path + ".yml"
    return default_config_file


def get_config_data(config=get_config_file()):
    """ Getting config data from a YAML file """

    try:
        with open(config, 'r') as stream:
            config_db = yaml.safe_load(stream)
    except yaml.YAMLError as exc:
        print(exc)
        sys.exit()
    except FileNotFoundError:
        print("Not found such file or directory: {}".format(config))
        sys.exit()

    return config_db


def get_common_data_set(groups_list):
    """ Summarize all groups data in common data set """

    common_data_set = {}

    config_db = ConfigData(get_config_data()).configure()
    for item in groups_list:
        added_group = config_db.get(item)
        if isinstance(added_group, dict):
            common_data_set = {**common_data_set, **added_group}
    return common_data_set


def get_all_hosts_data():
    """ Getting data of all exists host groups """

    config_db = ConfigData(get_config_data()).configure()
    groups_list = list(config_db.keys())
    return get_common_data_set(groups_list)


def get_specific_groups_data(groups):
    """ Obtain specific host groups by cli arguments """

    groups_list = groups.split(',')
    return get_common_data_set(groups_list)


def get_data_by_groups_exclude(excluded_groups):
    """ Obtain data of all groups exclude one or more from them """

    config_db = ConfigData(get_config_data()).configure()

    groups_list = list(config_db.keys())
    exception_list = excluded_groups.split(',')
    for group in exception_list:
        if group in groups_list:
            groups_list.remove(group)

    return get_common_data_set(groups_list)


def get_data_by_hosts_exclude(excluded_hosts):
    """ Getting all hosts exclude one or more of them """

    common_data_set = get_all_hosts_data()
    for host in excluded_hosts.split(','):
        if host in common_data_set:
            del common_data_set[host]
    return common_data_set


def get_all_groups_list():
    """ Printing list of all exists groups """

    config_db = ConfigData(get_config_data()).configure()
    if not config_db:
        return
    groups_list = list(config_db.keys())
    for group in groups_list:
        print(group)


def get_all_hostnames_list(group):
    """ View all hosts in specific group """

    try:
        hosts_list = list(group.keys())
        for host in hosts_list:
            print(host)
    except AttributeError:
        print("Not found such group, correct your input and try again...")
        get_all_groups_list()


def get_hosts_list_by_groups_list(groups_list):
    """ Getting list of hostnames by groups list """

    config_db = ConfigData(get_config_data()).configure()

    for group in groups_list.split(','):
        get_all_hostnames_list(config_db.get(group))


def get_hosts_list(group_name):
    """ Getting ip or hosts list from database by known group name """

    try:
        hosts_list = list(group_name.keys())
    except AttributeError:
        print("Not found such group, correct your input and try again...")
        get_all_groups_list()
        sys.exit()
    return hosts_list


def get_ports_list(hostname):
    """ Obtaining ports list from database """

    return list(hostname.values())


def get_hosts_list_length(group_name):
    """ Defining hosts list length """

    hosts = get_hosts_list(group_name)
    return len(hosts)


def host_scan(host, ports):
    """ Check sockets for one network host """

    for port in ports:
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(0.5)
            conn = sock.connect_ex((host, port))
            if conn == 0:
                RESULT.add('{0:<20}{1:>5} open\n'.format(host, port))
            else:
                RESULT.add('{0:<20}{1:>5} closed\n'.format(host, port))
            sock.close()
        except socket.gaierror:
            print('Hostname could not be resolved.')
        except socket.error:
            print('Could not connect to server.')


def ports_scan_hosts_from_database(hosts_list):
    """ Scan ports for one or more hosts from database """

    RESULT.add('Checked at {}\n'.format(time_now()))
    RESULT.add("-" * 30 + "\n")

    for host in hosts_list.split(','):
        if host not in get_all_hosts_data():
            print("Not found in database...")
            return
        host_scan(host, get_all_hosts_data().get(host))

        RESULT.add("-" * 30 + "\n")
    print(RESULT.report())


def check_sockets_from_cli(host_cli_arg, ports_cli_arg):
    """ Scan one or more sockets from command line arguments """

    RESULT.add('Checked at {}\n'.format(time_now()))
    RESULT.add("-" * 30 + "\n")

    port_list = []
    host = str(host_cli_arg)

    for port in ports_cli_arg.split(','):
        port_list.append(int(port))

    host_scan(host, port_list)

    RESULT.add("-" * 30 + "\n")
    print(RESULT.report())


def main(hosts_list, port_sets_list):
    """ Check sockets status for list of network hosts """

    RESULT.add('Checked at {}\n'.format(time_now()))
    RESULT.add("-" * 30 + "\n")

    config_db = ConfigData(command_line_interface()).configure()

    if not get_hosts_list_length(config_db):
        print("Group or host name not found in configuration file...")
        sys.exit()
    # Initial call to print 0% progress
    print_progress_bar(0, get_hosts_list_length(config_db), length=22)
    for item in range(get_hosts_list_length(config_db)):
        try:
            host = hosts_list[item]
            ports = port_sets_list[item]
            host_scan_threading = threading.Thread(
                target=host_scan, kwargs={'host': host, 'ports': ports})
            host_scan_threading.start()
            host_scan_threading.join()
            RESULT.add("-" * 30 + "\n")
            print_progress_bar(
                item + 1, get_hosts_list_length(config_db), length=22)
        except KeyboardInterrupt:
            print("Process interrupted by user...")
            sys.exit()

    print(RESULT.report())


def command_line_interface(args=docopt(__doc__)):
    """ Command Line Interface """

    if args['HOST'] and args['PORT']:
        check_sockets_from_cli(args['HOST'], args['PORT'])
        sys.exit()
    elif args['-g']:
        config_data = get_specific_groups_data(args['-g'])
    elif args['-X']:
        config_data = get_data_by_groups_exclude(args['-X'])
    elif args['-x']:
        config_data = get_data_by_hosts_exclude(args['-x'])
    elif args['-H']:
        ports_scan_hosts_from_database(args['-H'])
        sys.exit()
    elif args['-L']:
        get_hosts_list_by_groups_list(args['-L'])
        sys.exit()
    elif args['-l']:
        get_all_groups_list()
        sys.exit()
    elif args['-a']:
        config_data = get_all_hosts_data()
    else:
        print(__doc__)
        sys.exit()

    return config_data


if __name__ == '__main__':

    RESULT = ResultData()
    CONFIG = ConfigData(command_line_interface()).configure()

    main(get_hosts_list(CONFIG), get_ports_list(CONFIG))
