#!/usr/bin/env python3

import os
import sys
import socket
import yaml
import threading
from datetime import datetime

now = datetime.now()
dt_string = now.strftime("%d/%m/%Y %H:%M:%S")

script_path = os.path.realpath(__file__)
file = open(script_path + ".yml", 'r')
data = yaml.safe_load(file)

ip_list = list(data.keys())
ports_list = list(data.values())
ip_list_length = len(ip_list)

ports_scan_result = ''

def printProgressBar (iteration, total,
                      prefix = '', suffix = '', decimals = 1,
                      length = 100, fill = 'â–ˆ', printEnd = "\r"):
    """
    Call in a loop to create terminal progress bar
    @params:
        iteration   - Required  : current iteration (Int)
        total       - Required  : total iterations (Int)
        prefix      - Optional  : prefix string (Str)
        suffix      - Optional  : suffix string (Str)
        decimals    - Optional  : positive number of decimals in percent complete (Int)
        length      - Optional  : character length of bar (Int)
        fill        - Optional  : bar fill character (Str)
        printEnd    - Optional  : end character (e.g. "\r", "\r\n") (Str)
    """
    percent = ("{0:." + str(decimals) + "f}").format(100 * (iteration / float(total)))
    filledLength = int(length * iteration // total)
    bar = fill * filledLength + '-' * (length - filledLength)
    print('\r%s |%s| %s%% %s' % (prefix, bar, percent, suffix), end = printEnd)
    # Print New Line on Complete
    if iteration == total:
        print()

def port_scan(ip, ports):
    """ Check sockets for some one ip address of network host """

    global ports_scan_result

    for port in ports:
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(0.5)
            conn = sock.connect_ex((ip, port))
            if conn == 0:
                ports_scan_result += ('{0:<20}{1:>5} open\n'.format(ip, port))
            else:
                ports_scan_result += ('{0:<20}{1:>5} closed\n'.format(ip, port))
            sock.close()
        except socket.gaierror:
            print('Hostname could not be resolved.')
        except socket.error:
            print('Could not connect to server.')

def main(ip_list, ports_list):
    """ Check sockets status for list of ip addresses """

    global ports_scan_result
    ports_scan_result += ('Checked at {}\n'.format(dt_string))
    ports_scan_result += ("-" * 30 + "\n")

    # Initial call to print 0% progress
    printProgressBar(0, ip_list_length, length = 22)
    for i in range(ip_list_length):
        try:
            ip = ip_list[i]
            ports = ports_list[i]
            port_scan_threading = threading.Thread(target=port_scan,
                                                   kwargs={'ip': ip,'ports': ports})
            port_scan_threading.start()
            port_scan_threading.join()
            ports_scan_result += ("-" * 30 + "\n")
            printProgressBar(i + 1, ip_list_length, length = 22)
        except KeyboardInterrupt:
            print("Interrupted by Ctrl+C")
            sys.exit()

    print(ports_scan_result)


if __name__ == '__main__':
    main(ip_list, ports_list)

