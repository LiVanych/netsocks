#!/usr/bin/env python3

"""
Usage:
 netsocks [HOST PORT]
 netsocks [-g group,group]
 netsocks [-a][-l][-h]
 netsocks [-X group,group]
 netsocks [-x host,host]
 netsocks [-L group]
 netsocks [-H host,host]
 netsocks [-c file [-a][-l]]
 netsocks [-c file [-x host]]
 netsocks [-c file [-X group]]
 netsocks [-c file [-g group]]
 netsocks [-c file [-L group]]
 netsocks [-c file [-H host]]

Arguments:
 HOST       hostname or IP
 PORT       TCP port

Options:
 -l         groups list printing
 -L <grp>   one group hosts list
 -a         all sockets scan
 -X <grp>   all group except few
 -x <host>  all except something
 -g <grp>   one group checking
 -H <host>  one host socks check
 -c <file>  custom config file
 -h,--help  this help message
"""
import os
import sys
import socket
import oyaml as yaml
import threading
from datetime import datetime
from docopt import docopt

def time_now():
    now = datetime.now()
    dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
    return dt_string

def printProgressBar (iteration, total,
                      prefix = '', suffix = '', decimals = 1,
                      length = 100, fill = 'â–ˆ', printEnd = "\r"):
    """
    Call in a loop to create terminal progress bar
    @params:
        iteration   - Required  : current iteration (Int)
        total       - Required  : total iterations (Int)
        prefix      - Optional  : prefix string (Str)
        suffix      - Optional  : suffix string (Str)
        decimals    - Optional  : positive number of decimals in percent complete (Int)
        length      - Optional  : character length of bar (Int)
        fill        - Optional  : bar fill character (Str)
        printEnd    - Optional  : end character (e.g. "\r", "\r\n") (Str)
    """
    percent = ("{0:." + str(decimals) + "f}").format(100 * (iteration / float(total)))
    filledLength = int(length * iteration // total)
    bar = fill * filledLength + '-' * (length - filledLength)
    print('\r%s |%s| %s%% %s' % (prefix, bar, percent, suffix), end = printEnd)
    # Print New Line on Complete
    if iteration == total:
        print()

def get_config_file():
    """ Default config file is expected same named and in same directories """

    script_path = os.path.realpath(__file__)
    default_config_file = script_path + ".yml"
    return default_config_file

def get_config_data(config=get_config_file()):
    """ Getting config data from a YAML file """

    global config_db
    try:
        with open(config, 'r') as stream:
            config_db = yaml.safe_load(stream)
    except yaml.YAMLError as exc:
            print(exc)
            sys.exit()
    except FileNotFoundError:
            print("Not found such file or directory: {}".format(config))
            sys.exit()
    return config_db

def get_common_data_set(groups_list):
    """ Summarize all groups data in common data set """

    common_data_set = {}

    for i in range(len(groups_list)):
        added_group = config_db.get(groups_list[i])
        common_data_set = {**common_data_set, **added_group}
    return common_data_set

def get_all_hosts_data():
    """ Getting data of all exists host groups """

    groups_list = list(config_db.keys())
    return get_common_data_set(groups_list)

def get_specific_groups_data(groups):
    """ Obtain specific host groups by cli arguments """

    groups_list = groups.split(',')
    return get_common_data_set(groups_list)

def get_data_by_groups_exclude(excluded_groups):
    """ Obtain data of all groups exclude one or more from them """

    groups_list = list(config_db.keys())
    exception_list = excluded_groups.split(',')
    for group in range(len(exception_list)):
        if exception_list[group] in groups_list:
            groups_list.remove(exception_list[group])

    return get_common_data_set(groups_list)

def get_data_by_hosts_exclude(excluded_hosts):
    """ Getting all hosts exclude one or more of them """

    common_data_set = get_all_hosts_data()
    for host in excluded_hosts.split(','):
        if host in common_data_set:
            del common_data_set[host]
    return common_data_set

def get_all_groups_list():
    """ Printing list of all exists groups """

    groups_list = list(config_db.keys())
    for i in range(len(groups_list)):
        print(groups_list[i])

def get_all_hostnames_list(group):
    """ View all hosts in specific group """

    try:
        hosts_list = list(group.keys())
        for i in range(len(hosts_list)):
            print(hosts_list[i])
    except AttributeError:
        print("Not found such group, correct your input and try again...")
        get_all_groups_list()

def get_ip_list(data):
    """ Getting ip or hosts list from database """

    try:
        ip_list = list(data.keys())
    except AttributeError:
        print("Not found such group, correct your input and try again...")
        get_all_groups_list()
        sys.exit()
    return ip_list

def get_ports_list(data):
    """ Obtaining ports list from database """

    return list(data.values())

def ip_list_length(data):
    """ Defining ip list length """

    ip_list = get_ip_list(data)
    return len(ip_list)

def host_scan(ip, ports):
    """ Check sockets for one network host """

    global netsocks_status_report

    for port in ports:
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(0.5)
            conn = sock.connect_ex((ip, port))
            if conn == 0:
                netsocks_status_report += ('{0:<20}{1:>5} open\n'.format(ip, port))
            else:
                netsocks_status_report += ('{0:<20}{1:>5} closed\n'.format(ip, port))
            sock.close()
        except socket.gaierror:
            print('Hostname could not be resolved.')
        except socket.error:
            print('Could not connect to server.')

def ports_scan_hosts_from_database(hosts_list):
    """ Scan ports for one or more hosts from database """

    global netsocks_status_report
    netsocks_status_report += ('Checked at {}\n'.format(time_now()))
    netsocks_status_report += ("-" * 30 + "\n")

    for host in hosts_list.split(','):
        if not host in get_all_hosts_data():
            print("Not found in database...")
            return
        host_scan(host, get_all_hosts_data().get(host))

        netsocks_status_report += ("-" * 30 + "\n")
    print(netsocks_status_report)

def check_sockets_from_cli(host_cli_arg, ports_cli_arg):
    """ Scan one or more sockets from command line arguments """

    global netsocks_status_report
    netsocks_status_report += ('Checked at {}\n'.format(time_now()))
    netsocks_status_report += ("-" * 30 + "\n")

    port_list = []
    host = str(host_cli_arg)

    for port in ports_cli_arg.split(','):
        port_list.append(int(port))

    host_scan(host, port_list)

    netsocks_status_report += ("-" * 30 + "\n")
    print(netsocks_status_report)

def main(ip_list, ports_list):
    """ Check sockets status for list of network hosts """

    global netsocks_status_report
    netsocks_status_report += ('Checked at {}\n'.format(time_now()))
    netsocks_status_report += ("-" * 30 + "\n")

    # Initial call to print 0% progress
    printProgressBar(0, ip_list_length(data), length = 22)
    for i in range(ip_list_length(data)):
        try:
            ip = ip_list[i]
            ports = ports_list[i]
            host_scan_threading = threading.Thread(target=host_scan,
                                                   kwargs={'ip': ip,'ports': ports})
            host_scan_threading.start()
            host_scan_threading.join()
            netsocks_status_report += ("-" * 30 + "\n")
            printProgressBar(i + 1, ip_list_length(data), length = 22)
        except KeyboardInterrupt:
            print("Process interrupted by user...")
            sys.exit()

    print(netsocks_status_report)

if __name__ == '__main__':

    # Global variables
    config_db = {}
    netsocks_status_report = ''

    # Command line interface
    args = docopt(__doc__)

    if not args['-c']:
        get_config_data()
    else:
        get_config_data(args['-c'])

    if args['HOST'] and args['PORT']:
        check_sockets_from_cli(args['HOST'], args['PORT'])
        sys.exit()
    elif args['-H']:
        ports_scan_hosts_from_database(args['-H'])
        sys.exit()
    elif args['-a']:
        data = get_all_hosts_data()
    elif args['-g']:
        data = get_specific_groups_data(args['-g'])
    elif args['-X']:
        data = get_data_by_groups_exclude(args['-X'])
    elif args['-x']:
        data = get_data_by_hosts_exclude(args['-x'])
    elif args['-l']:
        get_all_groups_list()
        sys.exit()
    elif args['-L']:
        for i in args['-L'].split(','):
            get_all_hostnames_list(config_db.get(i))
        sys.exit()
    else:
        print(__doc__)
        sys.exit()

    ip_list = get_ip_list(data)
    ports_list = get_ports_list(data)

    main(ip_list, ports_list)

