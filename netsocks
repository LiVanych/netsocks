#!/usr/bin/env python3

import sys
import socket
import yaml
import threading
from datetime import datetime

now = datetime.now()
dt_string = now.strftime("%d/%m/%Y %H:%M:%S")

file = open('netsocks.yml', 'r')
data = yaml.safe_load(file)

ip_list = list(data.keys())
ports_list = list(data.values())

result = ''

def port_scan(ip, ports):
    """ Check sockets for some ip address of network host """

    global result
    try:

        for port in ports:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(0.5)
            conn = sock.connect_ex((ip, port))
            if conn == 0:
                result += ('{0:<20}{1:>5} open\n'.format(ip, port))
            else:
                result += ('{0:<20}{1:>5} closed\n'.format(ip, port))
            sock.close()
    except KeyboardInterrupt:
        print("Interrupted by Ctrl+C")
        sys.exit()
    except socket.gaierror:
        print('Hostname could not be resolved.')
    except socket.error:
        print('Could not connect to server.')

def main(ip_list, ports_list):
    """ Check sockets status for list of ip addresses """

    global result
    result += ('Checked at {}\n'.format(dt_string))
    result += ("-" * 30 + "\n")

    for i in range(len(ip_list)):
        ip = ip_list[i]
        ports = ports_list[i]
        port_scan_threading = threading.Thread(target=port_scan, kwargs={'ip': ip,'ports': ports})
        port_scan_threading.start()
        port_scan_threading.join()
        result += ("-" * 30 + "\n")

    print(result)


if __name__ == '__main__':
    main(ip_list, ports_list)

